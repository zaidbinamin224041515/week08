name: Frontend CD - Deploy Frontend to AKS

on:
  workflow_dispatch:
    inputs:
      product_api_base:
        description: 'Product API base (e.g., http://X.X.X.X:8000/api)'
        required: true
        default: 'http://<ip_address>:8000/api'
      order_api_base:
        description: 'Order API base (e.g., http://Y.Y.Y.Y:8001/api)'
        required: true
        default: 'http://<ip_address>:8001/api'
      aks_cluster_name:
        description: 'Name of the AKS Cluster'
        required: true
        default: 'sit722-aks-9165'
      aks_resource_group:
        description: 'Resource Group of the AKS Cluster'
        required: true
        default: 'sit722-w08-rg-9165'

env:
  ACR_LOGIN_SERVER: ${{ secrets.ACR_LOGIN_SERVER }}   # sit722acr9165.azurecr.io
  ACR_NAME:         ${{ secrets.ACR_NAME }}           # sit722acr9165

jobs:
  deploy_frontend:
    runs-on: ubuntu-latest
    environment: Production

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Remove CR/LF/whitespace from ACR_LOGIN_SERVER to avoid invalid docker tags
      - name: Normalize ACR vars
        shell: bash
        run: |
          CLEAN="$(echo -n "${ACR_LOGIN_SERVER}" | tr -d '\r\n' | xargs)"
          echo "ACR_LOGIN_SERVER=$CLEAN" >> "$GITHUB_ENV"

      - name: Login to Azure Container Registry
        run: az acr login --name "${{ env.ACR_NAME }}"

      - name: Inject Backend API bases into frontend/main.js
        run: |
          sed -i "s|_PRODUCT_API_URL_|${{ inputs.product_api_base }}|g" frontend/main.js
          sed -i "s|_ORDER_API_URL_|${{ inputs.order_api_base }}|g"   frontend/main.js
          grep -E "PRODUCT_API_BASE_URL|ORDER_API_BASE_URL" -n frontend/main.js || true

      - name: Build & Push Frontend image to ACR
        run: |
          docker build -t "${{ env.ACR_LOGIN_SERVER }}/frontend:latest" ./frontend
          docker push "${{ env.ACR_LOGIN_SERVER }}/frontend:latest"

      - name: Set AKS context
        uses: azure/aks-set-context@v3
        with:
          resource-group: ${{ inputs.aks_resource_group }}
          cluster-name:  ${{ inputs.aks_cluster_name }}

      - name: Deploy Frontend to AKS
        run: |
          kubectl apply -f k8s/frontend.yaml
          kubectl get deploy,po,svc -l app=frontend -o wide || true

      - name: Logout Azure
        if: always()
        run: az logout
