name: Frontend CD - Deploy Frontend to AKS

on:
  # Manual run; no inputs neededâ€”IPs are discovered from AKS
  workflow_dispatch: {}

env:
  ACR_LOGIN_SERVER: ${{ secrets.ACR_LOGIN_SERVER }}   # e.g. sit722acr9165.azurecr.io
  ACR_NAME:         ${{ secrets.ACR_NAME }}           # e.g. sit722acr9165
  IMAGE_TAG:        ${{ github.sha }}-${{ github.run_id }}

jobs:
  deploy_frontend:
    runs-on: ubuntu-latest
    environment: Production

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Clean up ACR_LOGIN_SERVER (strip CR/LF/whitespace)
      - name: Normalize ACR vars
        shell: bash
        run: |
          CLEAN="$(echo -n "${ACR_LOGIN_SERVER}" | tr -d '\r\n' | xargs)"
          echo "ACR_LOGIN_SERVER=$CLEAN" >> "$GITHUB_ENV"

      - name: Login to Azure Container Registry
        run: az acr login --name "${{ env.ACR_NAME }}"

      # ---- AKS context early so we can discover backend IPs ----
      - name: Set AKS context
        uses: azure/aks-set-context@v3
        with:
          resource-group: sit722-w08-rg-9165
          cluster-name:  sit722-aks-9165

      - name: Discover backend service IPs from AKS
        id: ips
        shell: bash
        run: |
          PRODUCT_IP="$(kubectl get svc product-service-w08e1 -o jsonpath='{.status.loadBalancer.ingress[0].ip}')"
          ORDER_IP="$(kubectl get svc order-service-w08e1   -o jsonpath='{.status.loadBalancer.ingress[0].ip}')"

          echo "PRODUCT_API_BASE=http://${PRODUCT_IP}:8000/api" >> $GITHUB_ENV
          echo "ORDER_API_BASE=http://${ORDER_IP}:8001/api"   >> $GITHUB_ENV

          echo "Product Service: http://${PRODUCT_IP}:8000/api"
          echo "Order Service:   http://${ORDER_IP}:8001/api"

      - name: Inject API bases into frontend/main.js
        shell: bash
        run: |
          sed -i "s|_PRODUCT_API_URL_|${PRODUCT_API_BASE}|g" frontend/main.js
          sed -i "s|_ORDER_API_URL_|${ORDER_API_BASE}|g"   frontend/main.js
          echo "--- main.js after injection ---"
          grep -E "PRODUCT_API_BASE_URL|ORDER_API_BASE_URL" -n frontend/main.js || true

      - name: Build & Push Frontend image (unique tag)
        shell: bash
        run: |
          docker build -t "${ACR_LOGIN_SERVER}/frontend:${IMAGE_TAG}" ./frontend
          docker push "${ACR_LOGIN_SERVER}/frontend:${IMAGE_TAG}"

      - name: Update Deployment to new image tag
        shell: bash
        run: |
          kubectl set image deployment/frontend \
            frontend-container="${ACR_LOGIN_SERVER}/frontend:${IMAGE_TAG}"
          kubectl rollout status deployment/frontend --timeout=180s
          kubectl get deploy,po,svc -l app=frontend -o wide || true

      - name: Logout Azure
        if: always()
        run: az logout
